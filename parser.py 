
import re

'''
A simple PGN parser.

PGN (Portable Game Notation) is computer-processible format for recording chess
games, both the moves and related data. 

This module is based on features of others parser modules (such json and yaml).
The basic usage::

    import pgn

    pgn_text = open('morphy.pgn).read()
    pgn_game = pgn.PGNGame()

    print pgn.loads(pgn_text) # Returns a list of PGNGame
    print pgn.dumps(pgn_game) # Returns a string with a pgn game

'''




import pandas as pd 


class PGNGame(object):
    def __init__(self):
        self.ficsgamesdbgameno = ""
        self.white = ""
        self.black = ""
        self.blackelo = 0
        self.whiteelo = 0
        self.timecontrol = 0
        self.eco = ""
        self.result = ""
        self.moves = []



def pre_process_text(text):

    text = re.sub(r'\s*(\\r)?\\n\s*', '\n', text.strip())
    lines = []
    for line in text.split('\n'):
        line = re.sub(r'(\s*;.*|^\s*)', '', line)
        if line:
            lines.append(line)
    
    return lines


def next_token(lines):

    if not lines:
        return None

    token = lines.pop(0).strip() 
    if token.startswith('['):
        return token

    while lines and not lines[0].startswith('['):
        token += ' '+lines.pop(0).strip()
    
    return token.strip()

def parse_tag(token):
    tag, value = re.match(r'\[(\w*)\s*(.+)', token).groups()
    return tag.lower(), value.strip('"[] ')

def parse_moves(token):
    moves = []
    while token != "":
        token = re.sub(r'^\s*(\d+\.+\s*)?', '', token)




def parse_moves(token):
    '''
    Parse a moves token and returns a list with moviments
    '''
    moves = []
    moves_string = token[3:]
    list_moves = moves_string.split(". ")
    for move in list_moves:
        moves.append(move[:-2])
    return moves


def get_games(text):
    games = []
    game =None
    lines = pre_process_text(text)
    print("step 1 works")
    token = next_token(lines)
    print("step 2 works")
    while token is not None:
        if token.startswith('['):
            tag, value = parse_tag(token)
            print("step 3 works")
            if not game or (game and game.moves):
                game = PGNGame()
                games.append(game)
            setattr(game, tag, value)
            print("step 4 works")

        else:
            game.moves = parse_moves(token)
            print("step 5 works")

        token = next_token(lines)
    return games

pgn_text = open('april_2017.pgn').read()
print(pgn_text)

for game in get_games(pgn_text):
    print(game.moves)